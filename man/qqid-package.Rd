% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/qqid-package.R
\docType{package}
\name{qqid-package}
\alias{qqid}
\alias{qqid-package}
\title{QQIDs - human-compatible representation of 128-bit numbers}
\description{
QQIDs are a representation of 128-bit numbers constructed
             from two "cues" of short, common, English words, and Base64
             encoded characters. Their primary intended use is for random
             unique identifiers, e.g. database keys, like RFC 4122 UUIDs.
             QQIDs can be identically interconverted with UUIDs, IPv6
             addresses, MD5 hashes etc., and are suitable for a host of
             applications in which identifiers are read by humans. They
             are compact, can safely be transmitted in binary and text
             form, are useable in URLs, and it can be established at a
             glance whether two QQIDs are different or potentially
             identical. The qqid package contains functions to generate
             true random and pseudo-random QQIDs, to validate them, and
             to interconvert them with other 128-bit number representations.
             An example QQID is bird.carp.7TsBWtwqtKAeCTNk8f .
}
\section{RNG safe}{
 Care has been taken to ensure that the \code{qqid}
  functions have little risk of inadvertently changing the RNG's global
  initialization state \code{.Random.seed}. Your random-reproducible
  simulation should not be affected if you generate a few QQIDs in-between.
}

\examples{
  # Use rngQQID() to get a few QQIDS with R's internal RNG
  rngQQID(7, method = "R")

  # That's fine, but it's better to initialize the RNG with a true-random
  # number. You need to be connected to the Internet ...
  \dontrun{
    rngQQID(7, method = "q")
    # ... of course you won't really notice
    # the difference. Except that it takes a
    # few seconds to fetch the random seed from
    # the quantum-random number server at the
    # Australian National University in Canberra
  }

  # The best way is to fetch a block of  true-random numbers from the ANU
  # in Canberra and to cache them in a closure...

  \dontrun{
    qQQID <- qQQIDfactory()   # takes a few seconds to fabricate the closure

    # then, getting QQIDs works without latency
    qQQID(1)
    qQQID(1)
    qQQID(2)
    qQQID(3)
    qQQID(5)
    qQQID(8)

    # if you are curious, you can peek what's next in the cache...
    qQQID(5, inspectOnly = TRUE)
    # (the numbers are not returned, only
    #  message()'d so you can't accidentally
    #  assign them)

    # ... and then retrieve some of those numbers
    qQQID(2)

    # of course, these two are now no longer on the cache.
    qQQID(5, inspectOnly = TRUE)

    # Now, you have just looked at a dozen of 128-bit random numbers, and had
    # no trouble figuring out which ones were the same, and which ones were
    # different. That's the point of QQIDs.
  }

}
\references{
See the
  \href{https://rawgit.com/hyginn/qqid/html/README.html}{\code{qqid} README
  on the Web} for more Details.
}
\seealso{
\code{\link[qrandom]{qUUID}},
}
\author{
\strong{Maintainer}: Boris Steipe \email{boris.steipe@utoronto.ca} (0000-0002-1134-6758)

}
\keyword{internal}
